#====== BATCH =========
services:
  # === Hadoop =====
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop2.7.4-java8
    container_name: namenode
    volumes:
      - namenode:/hadoop/dfs/name
    environment:
      - CLUSTER_NAME=test
    env_file:
      - ./services/hadoop-hive/hadoop-hive.env
    ports:
      - "50070:50070"
    networks:
      - stack-net
  datanode1:
    image: bde2020/hadoop-datanode:2.0.0-hadoop2.7.4-java8
    container_name: datanode1
    volumes:
      - datanode1:/hadoop/dfs/data
    env_file:
      - ./services/hadoop-hive/hadoop-hive.env
    environment:
      SERVICE_PRECONDITION: "namenode:50070"
    ports:
      - "50075:50075"
    networks:
      - stack-net

# ====== Hive =====
  hive-server:
    image: bde2020/hive:2.3.2-postgresql-metastore
    container_name:  hive-server
    env_file:
      - ./services/hadoop-hive/hadoop-hive.env
    environment:
      HIVE_CORE_CONF_javax_jdo_option_ConnectionURL: "jdbc:postgresql://hive-metastore/metastore"
      SERVICE_PRECONDITION: "hive-metastore:9083"
    volumes:
      - ./scripts:/root
    ports:
      - "10000:10000"
    networks:
      - stack-net
  hive-metastore:
    image: bde2020/hive:2.3.2-postgresql-metastore
    container_name: hive-metastore
    env_file:
      - ./services/hadoop-hive/hadoop-hive.env
    command: /opt/hive/bin/hive --service metastore
    environment:
      SERVICE_PRECONDITION: "namenode:50070 datanode1:50075  hive-metastore-postgresql:5432"
    ports:
      - "9083:9083"
    networks:
      - stack-net
  hive-metastore-postgresql:
    image: bde2020/hive-metastore-postgresql:2.3.0
    container_name: hive-metastore-postgresql
    volumes:
      - postgresql-data:/var/lib/postgresql/data
    networks:
      - stack-net    

# ===== Trino =====
  trino:
    image: trinodb/trino:latest
    hostname: trino
    container_name:  trino
    ports:
      - "8080:8080"
    volumes:
      - ./services/hadoop-hive/trino/data:/var/trino/data
      - ./services/hadoop-hive/trino/etc:/etc/trino
    depends_on:
      - hive-metastore
    networks:
      - stack-net

# ====== Spark =====
  spark-master:
    image: docker.io/bitnami/spark:3.5
    container_name: spark-master
    ports:
      - "7077:7077"
      - "8088:8080"  # Port web Spark Master 
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
      
    volumes:
      - ./services/hadoop-hive/spark-scripts:/spark-scripts 
      - ./data:/opt/spark-data 
      - ./scripts:/opt/hive-scripts 
      - ./services/hadoop-hive/hive-site.xml:/spark/conf/hive-site.xml
      - ./services/hadoop-hive/jars:/spark/jars
    networks:
      - stack-net

  spark-worker-1:
    image: docker.io/bitnami/spark:3.5
    container_name: spark-worker-1
    depends_on:
      - spark-master
    ports:
      - "8089:8081"  # Spark Worker 1 web UI
    volumes:
      - ./services/hadoop-hive/hive-site.xml:/spark/conf/hive-site.xml
      - ./services/hadoop-hive/jars:/spark/jars    
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
    networks:
      - stack-net

  spark-worker-2:
    image: docker.io/bitnami/spark:3.5
    container_name: spark-worker-2
    depends_on:
      - spark-master
    ports:
      - "8090:8081"  # Spark Worker 2 web UI
    volumes:
      - ./services/hadoop-hive/hive-site.xml:/spark/conf/hive-site.xml
      - ./services/hadoop-hive/jars:/spark/jars
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
    networks:
      - stack-net

# =========== Stream =========
 # --- KAFKA + ZOOKEEPER ---
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - stack-net

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    hostname: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,LISTENER_2://kafka:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,LISTENER_2://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,LISTENER_2:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      CONFLUENT_SUPPORT_CUSTOMER_ID: "anonymous"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      

    networks:
      - stack-net

  # --- KAFKA CONNECT ---
  kafka-connect:
    build:
      context: ./services/kafka-mongo/
      dockerfile: Dockerfile.kafka-connect
    container_name: kafka-connect
    hostname: kafka-connect
    depends_on:
      - kafka
      - mongo
      - zookeeper
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka:29092
      CONNECT_REST_PORT: 8083
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_GROUP_ID: "kafka-connect-group"
      CONNECT_CONFIG_STORAGE_TOPIC: connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: connect-status
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_AUTO_CREATE_TOPICS_ENABLE: "true"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      HADOOP_CONF_DIR: /etc/hadoop/conf
      HDFS_URL: hdfs://namenode:8020
      HDFS_USER: root
      KAFKA_JMX_PORT: 35000
      KAFKA_JMX_HOSTNAME: localhost
      
          
    volumes:
      - ./services/kafka-mongo/hadoop-conf:/etc/hadoop/conf
      - kafka_connect_data:/kafka/connect/data
    networks:
      - stack-net
# ==== kafka-connect-init ======
  kafka-connect-init:
    container_name: kafka-connect-init
    image: curlimages/curl:latest
    depends_on:
      - kafka-connect
    entrypoint: sh
    command: -c "sleep 20 && sh /scripts/post-connectors.sh"
    volumes:
      - ./services/kafka-mongo:/scripts
    networks:
      - stack-net


#--- click producteur ---
  click-producer:
    container_name: click-producer
    build:
      context: services/kafka-mongo
      dockerfile: Dockerfile.click-producer
    depends_on:
      - kafka
    command: ["./wait-for-kafka.sh", "python", "simulate_click_stream.py"]
    networks:
      - stack-net
  # --- MONGODB ---
  mongo:
    image: mongo:6.0
    container_name: mongo
    hostname: mongo
    volumes:
      - mongodb-data:/data/db
    command: ["mongod", "--replSet", "rs0"]
    ports:
      - "27017:27017"
    networks:
      - stack-net
  # ==== mongo-init-replica 
  mongo-init-replica:
    container_name: mongo-init-replica
    image: mongo:6.0
    depends_on:
      - mongo
    entrypoint: ["bash", "-c", "sleep 5 && mongosh --host mongo:27017 --eval 'rs.initiate()'"]
    networks:
      - stack-net

# ========== Metabase ===========
  metabase:
    image: metabase/metabase
    container_name: metabase
    ports:
      - "3000:3000"
    environment:
      MB_DB_FILE: /metabase-data/metabase.db
    volumes:
      - metabase-data:/metabase-data
    networks:
      - stack-net
#====== Securite =====
# --------------Ranger ---------------

  ranger-db:
    image: postgres:13
    container_name: ranger-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin123
      POSTGRES_DB: ranger
    volumes:
      - ranger_db_data:/var/lib/postgresql/data
    networks:
      - stack-net

  ranger:
    build:
      context: ./services/ranger
      dockerfile: Dockerfile
    container_name: ranger
    hostname: ranger
    ports:
      - "6080:6080"
    depends_on:
      - ranger-db
    networks:
      - stack-net






volumes:
  namenode:
  datanode1:
  postgresql-data:
  spark-events:
  mongodb-data:
  metabase-data:
  kafka_connect_data:
  ranger_db_data:

networks:
  stack-net:
    driver: bridge