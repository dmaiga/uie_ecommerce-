services:
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop2.7.4-java8
    container_name: namenode
    volumes:
      - namenode:/hadoop/dfs/name
    environment:
      - CLUSTER_NAME=test
    env_file:
      - ./services/hadoop-hive/hadoop-hive.env
    ports:
      - "50070:50070"
    networks:
      - stack-net
  datanode1:
    image: bde2020/hadoop-datanode:2.0.0-hadoop2.7.4-java8
    container_name: datanode1
    volumes:
      - datanode1:/hadoop/dfs/data
    env_file:
      - ./services/hadoop-hive/hadoop-hive.env
    environment:
      SERVICE_PRECONDITION: "namenode:50070"
    ports:
      - "50075:50075"
    networks:
      - stack-net


  hive-server:
    image: bde2020/hive:2.3.2-postgresql-metastore
    container_name:  hive-server
    env_file:
      - ./services/hadoop-hive/hadoop-hive.env
    environment:
      HIVE_CORE_CONF_javax_jdo_option_ConnectionURL: "jdbc:postgresql://hive-metastore/metastore"
      SERVICE_PRECONDITION: "hive-metastore:9083"
    ports:
      - "10000:10000"
    networks:
      - stack-net
  hive-metastore:
    image: bde2020/hive:2.3.2-postgresql-metastore
    container_name: hive-metastore
    env_file:
      - ./services/hadoop-hive/hadoop-hive.env
    command: /opt/hive/bin/hive --service metastore
    environment:
      SERVICE_PRECONDITION: "namenode:50070 datanode1:50075  hive-metastore-postgresql:5432"
    ports:
      - "9083:9083"
    networks:
      - stack-net
  hive-metastore-postgresql:
    image: bde2020/hive-metastore-postgresql:2.3.0
    container_name: hive-metastore-postgresql
    volumes:
      - postgresql-data:/var/lib/postgresql/data
    networks:
      - stack-net    

  presto-coordinator:
    image: shawnzhu/prestodb:0.181
    container_name:  presto-coordinator
    ports:
      - "8080:8080"
    networks:
      - stack-net
  spark-master:
    image: bde2020/spark-master:3.3.0-hadoop3.3
    container_name: spark-master
    ports:
      - "7077:7077"
      - "8088:8080"  # Port web Spark Master 
    environment:
      - INIT_DAEMON_STEP=setup_spark
    volumes:
      - ./services/hadoop-hive/spark-scripts:/spark-scripts 
      - ./data:/opt/spark-data 
      - ./scripts:/opt/hive-scripts 
    networks:
      - stack-net

  spark-worker-1:
    image: bde2020/spark-worker:3.3.0-hadoop3.3
    container_name: spark-worker-1
    depends_on:
      - spark-master
    ports:
      - "8089:8081"  # Spark Worker 1 web UI
    environment:
      - "SPARK_MASTER=spark://spark-master:7077"
    networks:
      - stack-net

  spark-worker-2:
    image: bde2020/spark-worker:3.3.0-hadoop3.3
    container_name: spark-worker-2
    depends_on:
      - spark-master
    ports:
      - "8090:8081"  # Spark Worker 2 web UI
    environment:
      - "SPARK_MASTER=spark://spark-master:7077"
    networks:
      - stack-net

  spark-history-server:
    image: bde2020/spark-history-server:3.3.0-hadoop3.3
    container_name: spark-history-server
    depends_on:
      - spark-master
    ports:
      - "18081:18081"
    volumes:
      - spark-events:/tmp/spark-events
    networks:
      - stack-net
 # --- KAFKA + ZOOKEEPER ---
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    networks:
      - stack-net

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - stack-net

  # --- KAFKA CONNECT ---
  kafka-connect:
    build:
      context: ./services/kafka-mongo/
      dockerfile: Dockerfile.kafka-connect
    container_name: kafka-connect
    depends_on:
      - kafka
      - mongo
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka:9092
      CONNECT_REST_PORT: 8083
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_GROUP_ID: "kafka-connect-group"
      CONNECT_CONFIG_STORAGE_TOPIC: connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: connect-status
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"

    networks:
      - stack-net

  # --- MONGODB ---
  mongo:
    image: mongo:6.0
    container_name: mongo
    volumes:
      - mongodb-data:/data/db
    ports:
      - "27017:27017"
    networks:
      - stack-net


volumes:
  namenode:
  datanode1:
  postgresql-data:
  spark-events:
  mongodb-data:

networks:
  stack-net:
    driver: bridge